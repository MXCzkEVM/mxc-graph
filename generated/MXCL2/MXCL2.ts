// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AddressManagerChanged extends ethereum.Event {
  get params(): AddressManagerChanged__Params {
    return new AddressManagerChanged__Params(this);
  }
}

export class AddressManagerChanged__Params {
  _event: AddressManagerChanged;

  constructor(event: AddressManagerChanged) {
    this._event = event;
  }

  get addressManager(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Anchored extends ethereum.Event {
  get params(): Anchored__Params {
    return new Anchored__Params(this);
  }
}

export class Anchored__Params {
  _event: Anchored;

  constructor(event: Anchored) {
    this._event = event;
  }

  get number(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get basefee(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get gaslimit(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get timestamp(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get parentHash(): Bytes {
    return this._event.parameters[4].value.toBytes();
  }

  get prevrandao(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get coinbase(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get chainid(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }
}

export class CrossChainSynced extends ethereum.Event {
  get params(): CrossChainSynced__Params {
    return new CrossChainSynced__Params(this);
  }
}

export class CrossChainSynced__Params {
  _event: CrossChainSynced;

  constructor(event: CrossChainSynced) {
    this._event = event;
  }

  get srcHeight(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get blockHash(): Bytes {
    return this._event.parameters[1].value.toBytes();
  }

  get signalRoot(): Bytes {
    return this._event.parameters[2].value.toBytes();
  }
}

export class Initialized extends ethereum.Event {
  get params(): Initialized__Params {
    return new Initialized__Params(this);
  }
}

export class Initialized__Params {
  _event: Initialized;

  constructor(event: Initialized) {
    this._event = event;
  }

  get version(): i32 {
    return this._event.parameters[0].value.toI32();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class MXCL2__getEIP1559ConfigResultValue0Struct extends ethereum.Tuple {
  get yscale(): BigInt {
    return this[0].toBigInt();
  }

  get xscale(): BigInt {
    return this[1].toBigInt();
  }

  get gasIssuedPerSecond(): BigInt {
    return this[2].toBigInt();
  }
}

export class MXCL2__signAnchorResult {
  value0: i32;
  value1: BigInt;
  value2: BigInt;

  constructor(value0: i32, value1: BigInt, value2: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set(
      "value0",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value0))
    );
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    map.set("value2", ethereum.Value.fromUnsignedBigInt(this.value2));
    return map;
  }

  getV(): i32 {
    return this.value0;
  }

  getR(): BigInt {
    return this.value1;
  }

  getS(): BigInt {
    return this.value2;
  }
}

export class MXCL2 extends ethereum.SmartContract {
  static bind(address: Address): MXCL2 {
    return new MXCL2("MXCL2", address);
  }

  GOLDEN_TOUCH_ADDRESS(): Address {
    let result = super.call(
      "GOLDEN_TOUCH_ADDRESS",
      "GOLDEN_TOUCH_ADDRESS():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_GOLDEN_TOUCH_ADDRESS(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "GOLDEN_TOUCH_ADDRESS",
      "GOLDEN_TOUCH_ADDRESS():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  GOLDEN_TOUCH_PRIVATEKEY(): BigInt {
    let result = super.call(
      "GOLDEN_TOUCH_PRIVATEKEY",
      "GOLDEN_TOUCH_PRIVATEKEY():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_GOLDEN_TOUCH_PRIVATEKEY(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "GOLDEN_TOUCH_PRIVATEKEY",
      "GOLDEN_TOUCH_PRIVATEKEY():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  addressManager(): Address {
    let result = super.call("addressManager", "addressManager():(address)", []);

    return result[0].toAddress();
  }

  try_addressManager(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "addressManager",
      "addressManager():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  gasExcess(): BigInt {
    let result = super.call("gasExcess", "gasExcess():(uint64)", []);

    return result[0].toBigInt();
  }

  try_gasExcess(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("gasExcess", "gasExcess():(uint64)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBasefee(
    timeSinceParent: BigInt,
    gasLimit: BigInt,
    parentGasUsed: BigInt
  ): BigInt {
    let result = super.call(
      "getBasefee",
      "getBasefee(uint32,uint64,uint64):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(timeSinceParent),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromUnsignedBigInt(parentGasUsed)
      ]
    );

    return result[0].toBigInt();
  }

  try_getBasefee(
    timeSinceParent: BigInt,
    gasLimit: BigInt,
    parentGasUsed: BigInt
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getBasefee",
      "getBasefee(uint32,uint64,uint64):(uint256)",
      [
        ethereum.Value.fromUnsignedBigInt(timeSinceParent),
        ethereum.Value.fromUnsignedBigInt(gasLimit),
        ethereum.Value.fromUnsignedBigInt(parentGasUsed)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getBlockHash(number: BigInt): Bytes {
    let result = super.call("getBlockHash", "getBlockHash(uint256):(bytes32)", [
      ethereum.Value.fromUnsignedBigInt(number)
    ]);

    return result[0].toBytes();
  }

  try_getBlockHash(number: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getBlockHash",
      "getBlockHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCrossChainBlockHash(number: BigInt): Bytes {
    let result = super.call(
      "getCrossChainBlockHash",
      "getCrossChainBlockHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );

    return result[0].toBytes();
  }

  try_getCrossChainBlockHash(number: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCrossChainBlockHash",
      "getCrossChainBlockHash(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getCrossChainSignalRoot(number: BigInt): Bytes {
    let result = super.call(
      "getCrossChainSignalRoot",
      "getCrossChainSignalRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );

    return result[0].toBytes();
  }

  try_getCrossChainSignalRoot(number: BigInt): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getCrossChainSignalRoot",
      "getCrossChainSignalRoot(uint256):(bytes32)",
      [ethereum.Value.fromUnsignedBigInt(number)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getEIP1559Config(): MXCL2__getEIP1559ConfigResultValue0Struct {
    let result = super.call(
      "getEIP1559Config",
      "getEIP1559Config():((uint128,uint64,uint64))",
      []
    );

    return changetype<MXCL2__getEIP1559ConfigResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getEIP1559Config(): ethereum.CallResult<
    MXCL2__getEIP1559ConfigResultValue0Struct
  > {
    let result = super.tryCall(
      "getEIP1559Config",
      "getEIP1559Config():((uint128,uint64,uint64))",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<MXCL2__getEIP1559ConfigResultValue0Struct>(value[0].toTuple())
    );
  }

  latestSyncedL1Height(): BigInt {
    let result = super.call(
      "latestSyncedL1Height",
      "latestSyncedL1Height():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_latestSyncedL1Height(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "latestSyncedL1Height",
      "latestSyncedL1Height():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  parentTimestamp(): BigInt {
    let result = super.call(
      "parentTimestamp",
      "parentTimestamp():(uint64)",
      []
    );

    return result[0].toBigInt();
  }

  try_parentTimestamp(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "parentTimestamp",
      "parentTimestamp():(uint64)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  publicInputHash(): Bytes {
    let result = super.call(
      "publicInputHash",
      "publicInputHash():(bytes32)",
      []
    );

    return result[0].toBytes();
  }

  try_publicInputHash(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "publicInputHash",
      "publicInputHash():(bytes32)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  resolve(chainId: BigInt, name: Bytes, allowZeroAddress: boolean): Address {
    let result = super.call(
      "resolve",
      "resolve(uint256,bytes32,bool):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromFixedBytes(name),
        ethereum.Value.fromBoolean(allowZeroAddress)
      ]
    );

    return result[0].toAddress();
  }

  try_resolve(
    chainId: BigInt,
    name: Bytes,
    allowZeroAddress: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "resolve",
      "resolve(uint256,bytes32,bool):(address)",
      [
        ethereum.Value.fromUnsignedBigInt(chainId),
        ethereum.Value.fromFixedBytes(name),
        ethereum.Value.fromBoolean(allowZeroAddress)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  resolve1(name: Bytes, allowZeroAddress: boolean): Address {
    let result = super.call("resolve", "resolve(bytes32,bool):(address)", [
      ethereum.Value.fromFixedBytes(name),
      ethereum.Value.fromBoolean(allowZeroAddress)
    ]);

    return result[0].toAddress();
  }

  try_resolve1(
    name: Bytes,
    allowZeroAddress: boolean
  ): ethereum.CallResult<Address> {
    let result = super.tryCall("resolve", "resolve(bytes32,bool):(address)", [
      ethereum.Value.fromFixedBytes(name),
      ethereum.Value.fromBoolean(allowZeroAddress)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  signAnchor(digest: Bytes, k: i32): MXCL2__signAnchorResult {
    let result = super.call(
      "signAnchor",
      "signAnchor(bytes32,uint8):(uint8,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(digest),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(k))
      ]
    );

    return new MXCL2__signAnchorResult(
      result[0].toI32(),
      result[1].toBigInt(),
      result[2].toBigInt()
    );
  }

  try_signAnchor(
    digest: Bytes,
    k: i32
  ): ethereum.CallResult<MXCL2__signAnchorResult> {
    let result = super.tryCall(
      "signAnchor",
      "signAnchor(bytes32,uint8):(uint8,uint256,uint256)",
      [
        ethereum.Value.fromFixedBytes(digest),
        ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(k))
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new MXCL2__signAnchorResult(
        value[0].toI32(),
        value[1].toBigInt(),
        value[2].toBigInt()
      )
    );
  }
}

export class AnchorCall extends ethereum.Call {
  get inputs(): AnchorCall__Inputs {
    return new AnchorCall__Inputs(this);
  }

  get outputs(): AnchorCall__Outputs {
    return new AnchorCall__Outputs(this);
  }
}

export class AnchorCall__Inputs {
  _call: AnchorCall;

  constructor(call: AnchorCall) {
    this._call = call;
  }

  get l1Hash(): Bytes {
    return this._call.inputValues[0].value.toBytes();
  }

  get l1SignalRoot(): Bytes {
    return this._call.inputValues[1].value.toBytes();
  }

  get l1Height(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get parentGasUsed(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }
}

export class AnchorCall__Outputs {
  _call: AnchorCall;

  constructor(call: AnchorCall) {
    this._call = call;
  }
}

export class InitCall extends ethereum.Call {
  get inputs(): InitCall__Inputs {
    return new InitCall__Inputs(this);
  }

  get outputs(): InitCall__Outputs {
    return new InitCall__Outputs(this);
  }
}

export class InitCall__Inputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }

  get _addressManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _param1559(): InitCall_param1559Struct {
    return changetype<InitCall_param1559Struct>(
      this._call.inputValues[1].value.toTuple()
    );
  }
}

export class InitCall__Outputs {
  _call: InitCall;

  constructor(call: InitCall) {
    this._call = call;
  }
}

export class InitCall_param1559Struct extends ethereum.Tuple {
  get basefee(): BigInt {
    return this[0].toBigInt();
  }

  get gasIssuedPerSecond(): BigInt {
    return this[1].toBigInt();
  }

  get gasExcessMax(): BigInt {
    return this[2].toBigInt();
  }

  get gasTarget(): BigInt {
    return this[3].toBigInt();
  }

  get ratio2x1x(): BigInt {
    return this[4].toBigInt();
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAddressManagerCall extends ethereum.Call {
  get inputs(): SetAddressManagerCall__Inputs {
    return new SetAddressManagerCall__Inputs(this);
  }

  get outputs(): SetAddressManagerCall__Outputs {
    return new SetAddressManagerCall__Outputs(this);
  }
}

export class SetAddressManagerCall__Inputs {
  _call: SetAddressManagerCall;

  constructor(call: SetAddressManagerCall) {
    this._call = call;
  }

  get newAddressManager(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetAddressManagerCall__Outputs {
  _call: SetAddressManagerCall;

  constructor(call: SetAddressManagerCall) {
    this._call = call;
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
